# Generated by Django 2.1.5 on 2019-04-27 03:28

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0010_auto_20190423_0639'),
    ]

    operations = [
        migrations.CreateModel(
            name='Areas',
            fields=[
                ('area_id', models.IntegerField(default=0, primary_key=True, serialize=False)),
                ('area_parent', models.IntegerField(blank=True, null=True)),
                ('area_name', models.CharField(max_length=32)),
                ('area_type', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'areas',
            },
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_num', models.IntegerField(default=1, verbose_name='选项编号')),
                ('choice_text', models.CharField(max_length=32, verbose_name='选项')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.CharField(max_length=32, verbose_name='年级')),
                ('team', models.CharField(max_length=32, verbose_name='班级')),
                ('course', models.CharField(max_length=32, verbose_name='课程')),
            ],
            options={
                'verbose_name': '教师课程表',
                'verbose_name_plural': '教师课程表',
            },
        ),
        migrations.CreateModel(
            name='Dimension',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dimension_text', models.CharField(max_length=32, unique=True, verbose_name='维度')),
            ],
            options={
                'verbose_name': '维度表',
                'verbose_name_plural': '维度表',
            },
        ),
        migrations.CreateModel(
            name='Field',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_text', models.CharField(max_length=32, unique=True, verbose_name='领域')),
            ],
            options={
                'verbose_name': '领域表',
                'verbose_name_plural': '领域表',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(max_length=32, verbose_name='领域')),
                ('question_text', models.CharField(max_length=32, verbose_name='题目')),
                ('distinction', models.CharField(max_length=32, verbose_name='区分度')),
                ('difficulty', models.CharField(max_length=32, verbose_name='难度')),
                ('is_use', models.BooleanField(default=False, verbose_name='是否使用')),
                ('dimension', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CAT_project.Dimension')),
            ],
            options={
                'verbose_name': '试题表',
                'verbose_name_plural': '试题表',
            },
        ),
        migrations.CreateModel(
            name='Student_Question_Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_num', models.IntegerField(default=0, verbose_name='作答编号')),
                ('result', models.CharField(max_length=18, verbose_name='作答结果')),
                ('information', models.CharField(max_length=18, verbose_name='信息量')),
                ('theta', models.CharField(max_length=18, verbose_name='能力')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CAT_project.Question')),
            ],
            options={
                'verbose_name': '学生答题表',
                'verbose_name_plural': '学生答题表',
            },
        ),
        migrations.CreateModel(
            name='User_Administrator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('administrator_id', models.CharField(max_length=18, verbose_name='账号')),
                ('name', models.CharField(max_length=32, verbose_name='中文名')),
                ('address', models.CharField(max_length=128, verbose_name='地址')),
                ('identity', models.CharField(choices=[('管理员', '管理员'), ('教师', '教师'), ('学生', '学生')], default='管理员', max_length=32, verbose_name='身份')),
                ('mobile', models.CharField(blank=True, max_length=20, verbose_name='联系方式')),
            ],
            options={
                'verbose_name': '管理员信息表',
                'verbose_name_plural': '管理员信息表',
                'ordering': ['administrator_id'],
            },
        ),
        migrations.CreateModel(
            name='User_Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(max_length=18, verbose_name='账号')),
                ('name', models.CharField(max_length=32, verbose_name='中文名')),
                ('sex', models.CharField(choices=[('男', '男'), ('女', '女')], max_length=32, verbose_name='性别')),
                ('address', models.CharField(max_length=128, verbose_name='地址')),
                ('identity', models.CharField(choices=[('管理员', '管理员'), ('教师', '教师'), ('学生', '学生')], default='学生', max_length=32, verbose_name='身份')),
                ('grade', models.CharField(max_length=32, verbose_name='年级')),
                ('team', models.CharField(max_length=32, verbose_name='班级')),
                ('guardian_name', models.CharField(max_length=32, verbose_name='监护人')),
                ('guardian_mobile', models.CharField(max_length=20, verbose_name='监护人联系方式')),
                ('basetheta', models.CharField(max_length=18, verbose_name='心理能力值')),
                ('testflag', models.BooleanField(default=False, verbose_name='是否测验')),
                ('mentalstate', models.CharField(max_length=256, verbose_name='心理状态')),
            ],
            options={
                'verbose_name': '学生信息表',
                'verbose_name_plural': '学生信息表',
                'ordering': ['student_id'],
            },
        ),
        migrations.CreateModel(
            name='User_Teacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teacher_id', models.CharField(max_length=18, verbose_name='账号')),
                ('name', models.CharField(max_length=32, verbose_name='中文名')),
                ('address', models.CharField(max_length=128, verbose_name='地址')),
                ('identity', models.CharField(choices=[('管理员', '管理员'), ('教师', '教师'), ('学生', '学生')], default='教师', max_length=32, verbose_name='身份')),
                ('post', models.CharField(choices=[('班主任', '班主任'), ('普通教师', '普通教师')], max_length=32, verbose_name='职位')),
                ('mobile', models.CharField(max_length=20, verbose_name='联系方式')),
                ('administrator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CAT_project.User_Administrator')),
            ],
            options={
                'verbose_name': '教师信息表',
                'verbose_name_plural': '教师信息表',
                'ordering': ['teacher_id'],
            },
        ),
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=150, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('province', models.CharField(max_length=32, verbose_name='省')),
                ('city', models.CharField(max_length=32, verbose_name='市')),
                ('county', models.CharField(max_length=32, verbose_name='县')),
                ('school', models.CharField(max_length=128, verbose_name='学校')),
                ('identity', models.CharField(choices=[('管理员', '管理员'), ('教师', '教师'), ('学生', '学生')], default='学生', max_length=32, verbose_name='身份')),
                ('name', models.CharField(max_length=32, verbose_name='中文名')),
                ('parent', models.CharField(default='liujingxiang', max_length=128, verbose_name='上级')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户登录表',
                'verbose_name_plural': '用户登录表',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='user_student',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CAT_project.User_Teacher'),
        ),
        migrations.AlterUniqueTogether(
            name='user_administrator',
            unique_together={('administrator_id', 'address', 'identity')},
        ),
        migrations.AddField(
            model_name='student_question_result',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CAT_project.User_Student'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CAT_project.Field'),
        ),
        migrations.AddField(
            model_name='course',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CAT_project.User_Teacher'),
        ),
        migrations.AddField(
            model_name='choice',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CAT_project.Question'),
        ),
        migrations.AlterUniqueTogether(
            name='myuser',
            unique_together={('province', 'city', 'county', 'school', 'username', 'identity')},
        ),
        migrations.AlterUniqueTogether(
            name='user_teacher',
            unique_together={('teacher_id', 'address', 'identity')},
        ),
        migrations.AlterUniqueTogether(
            name='user_student',
            unique_together={('student_id', 'address', 'identity')},
        ),
        migrations.AlterUniqueTogether(
            name='student_question_result',
            unique_together={('user', 'question')},
        ),
    ]
